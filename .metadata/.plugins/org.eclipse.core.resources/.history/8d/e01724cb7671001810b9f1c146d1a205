package arvore; 

import cloneDeX.CloneDeX;
import compactador.Compactador.FreqSimb;

import java.util.Arrays;

import codigo.Codigo;

public class Arvore<X>
{
	protected class No<X>
	{
		protected No ant = null;
		protected X  info;
		protected No esq = null;
		protected No dir = null;

		// nao precisa ter cuidados ante-anta (throws Exception, metodos obrigatorios), pois a classe Ã© protected

		// construtores
		public No(X x)
		{
			this(null, null, x, null);
		}

		public No(X x, No d)
		{
			this(null, null, x, d);
		}

		public No(No e, X x, No d)
		{
			this(null, e, x, d);

			if(e != null)
				e.ant = this;
			if(d != null)
				d.ant = this;
		}

		public No(No a, No e, X x, No d)
		{
			this.ant = a;
			this.info = x;
			this.esq = e;
			this.dir = d;
		}


		// getters and setters
		public void setAnt(No no)
		{
			this.ant = no;
		}

		public void setInfo(X x)
		{
			this.info = x;
		}

		public void setEsq(No no)
		{
			this.esq = no;

			if(no != null)
				no.ant = this;
		}

		public void setDir(No no)
		{
			this.dir = no;

			if(no != null)
				no.ant = this;
		}

		public No getAnt()
		{
			return this.ant;
		}

		public X getInfo()
		{
			return this.info;
		}

		public No getEsq()
		{
			return this.esq;
		}

		public No getDir()
		{
			return this.dir;
		}
		
		public String toString()
		{
			return this.getInfo().toString();
		}
	}

	protected No raiz = null;
	protected No atualArv = null;
	
	protected Codigo[] codigos;

	protected boolean jahAchou = false; //usado apenas na exclusao

	public Arvore()
	{}
	
	public void inserirNoInicio(X x) throws Exception
	{
		if(x==null)
			throw new Exception("Informacao a ser inserida no inicio nula!");

		if(this.raiz == null)
			this.atualArv = this.raiz;

		this.raiz = new No ((X)CloneDeX.clone(x));
	}

	public void inserirEmAtual(X x, boolean direita) throws Exception
	{
		if(x==null)
			throw new Exception("Informacao a ser inserida no inicio nula!");

		if(this.atualArv == null || this.atualArv.getInfo() == null)
			throw new Exception("Atual nulo!");

		if(direita)
			this.atualArv.setDir(new No ((X)CloneDeX.clone(x)));
		else
			this.atualArv.setEsq(new No ((X)CloneDeX.clone(x)));
	}

	public void excluir(X x) throws Exception
	{
		if(x == null)
			throw new Exception("Informacao nula!");

		this.jahAchou = false;
		
		if(!this.excluir(this.raiz, x))
			throw new Exception("Essa informacao nao existe na Arvore!");
	}

	protected boolean excluir(No no, X x)
	{
		if(no == null || this.jahAchou)
			return false;

		if(no.getInfo().equals(x))
		{
			this.jahAchou = true;
			//processo de exclusao (mo trampo n vai dar tempo)
			//ele soh "ensinou" exclusao de Arvores com X comparable e nao faz sentido nesse caso, n sei cmo a gnt vai fazer...
		
			return true;
		}

		return this.excluir(no.getEsq(), x) || this.excluir(no.getDir(), x);
	}

	public void juntar(Arvore<X> e, Arvore<X> d)
	{
		
		
		//Fazer ficar worth
			this.raiz.setEsq(e.raiz);
			this.raiz.setDir(d.raiz);
	}
	
	public Codigo[] montarVetor()
	{	
		this.codigos = new Codigo[256];
		
		for(int i=0; i < this.codigos.length; i++)
			this.codigos[i] = new Codigo();
		
		this.colocarAtualNaRaiz();
		this.auxMontarVetor(new Codigo());
		return this.codigos;
	}
	
	protected void auxMontarVetor(Codigo c)
	{
		if (this.atualArv == null)
			return;
		
		if ((this.atualArv.getEsq() == null && this.atualArv.getDir() == null) && this.getAtual() != null)
		{
			C : for(int i = 0; ; i++)
			if(codigos[i].getQtdBits() == 0)
			{
				this.codigos[i] = (Codigo) c.clone();
				break C;
			}
		}
			else
			{
				try 
				{
					this.andarAtualEsq();
				} 
				catch (Exception e) 
				{
					e.printStackTrace();
				}
				c.mais(0);
				this.auxMontarVetor(c);
				this.atualArv = this.atualArv.ant;
				c.tirarUltimo();
				
				try 
				{
					this.andarAtualDir();
				}
				catch (Exception e) 
				{
					e.printStackTrace();
				}
				c.mais(1);
				this.auxMontarVetor(c);
				this.atualArv = this.atualArv.ant;
				c.tirarUltimo();
			}
	}
	
	public void colocarAtualNaRaiz()
	{
		this.atualArv = this.raiz;
	}

	public X getAtual()
	{
		if(this.atualArv!= null)
			return (X)this.atualArv.getInfo();
		
		return null;
	}
	
	public X getProxAtual(boolean dir) throws Exception
	{
		if(this.atualArv == null)
			throw new Exception("Atual nulo!");
		
		if(dir)
			return (X)this.atualArv.getDir().getInfo();
		
		return (X)this.atualArv.getEsq().getInfo();
	}

	public void regredirAtual() throws Exception
	{
		this.atualArv = this.atualArv.getAnt();
	}

	public void andarAtualEsq() throws Exception
	{
		if(this.atualArv.getInfo() == null)
			throw new Exception("Nao eh possivel descer mais!");

		if(this.atualArv.getEsq() == null)
			this.atualArv = new No(this.atualArv, null, null, null);
		else
			this.atualArv = this.atualArv.getEsq();
	}

	public void andarAtualDir() throws Exception
	{
		if(this.atualArv.getInfo() == null)
			throw new Exception("Nao eh possivel descer mais!");

		if(this.atualArv.getDir() == null)
			this.atualArv = new No(this.atualArv, null, null, null);
		else
			this.atualArv = this.atualArv.getDir();
	}


//metodos obrigatorios
    public String toString ()
    {
    	String ret = "";
        return "{" + this.toString(this.raiz) + "}";
    }

    protected String toString(No r)
    {
        if(r==null)
            return "";
        return "(" + this.toString(r.getEsq()) + ")" + r.getInfo().toString() + "(" + this.toString(r.getDir()) + ")";
    }
    
    public int altura()
    {
    	return altura(this.raiz);
    }
    
    protected int altura(No r)
    {
    	if(r == null)
    		return 0;
    	
    	int alturaDir = altura(r.getDir());
    	int alturaEsq = altura(r.getEsq());
    	if(alturaDir> alturaEsq)
    		return alturaDir + 1;
    	
    	return alturaEsq + 1;
    }

    public boolean equals (Object obj)
    {
        if(obj==null)
            return false;
        if(this==obj)
            return true;

        if(!(obj.getClass() == this.getClass()))
            return false;

        return this.equals(this.raiz, ((Arvore)obj).raiz);
    }

    protected boolean equals(No rt, No ro)
    {
        if(rt == null && ro == null)
            return true;
        if((rt == null && ro != null) || (rt != null && ro == null))
            return false;

        if(!rt.getInfo().equals(ro.getInfo()))
            return false;

        return this.equals(ro.getEsq(), rt.getEsq()) && this.equals(ro.getDir(), rt.getDir());
    }

    public int hashCode ()
    {
        return this.hashCode(this.raiz);
    }

    protected int hashCode (No r)
    {
        if(r == null)
            return 0;

        //ret = ret*7 + x.hashCode();
        return 7*this.hashCode(r.getEsq()) + r.getInfo().hashCode() + 9*this.hashCode(r.getDir());
    }

    public Arvore (Arvore<X> modelo) throws Exception
    {
        if(modelo == null)
            throw new Exception("Modelo nulo!");

        this.raiz = this.auxConstrutorCopia(modelo.raiz);
    }

    protected No auxConstrutorCopia(No ro)
    {
        if(ro == null)
            return null;

        return new No(this.auxConstrutorCopia(ro.getEsq()), ro.getInfo(), 
                this.auxConstrutorCopia(ro.getDir()));
    }

    public Object clone ()
    {
        Arvore ret = null;

        try
        {
            ret = new Arvore(this);
        }catch(Exception e)
        {
        	e.printStackTrace();
        }

        return ret;
    }

	public byte[] acharElemento(int simb) throws Exception
	{
		this.colocarAtualNaRaiz();
		
		if(((FreqSimb) this.raiz.getInfo()).getSimb() == simb)
			return new Codigo("0").getByte();
		
		try
		{
			return acharElemento(this.raiz.getEsq(), new Codigo("0"), simb);
		}
		catch (Exception erro)
		{
			
		}
		
		try
		{
			return acharElemento(this.raiz.getDir(),new Codigo("1"), simb);
		}
		catch (Exception erro)
		{
			
		}
		throw new Exception("Não achei");
	}
	
	protected byte[] acharElemento(No n, Codigo c, int simb) throws Exception
	{
		if(n == null)
			throw new Exception("Não achei");
		
		if(((FreqSimb) n.getInfo()).getSimb() == simb)
			return c.getByte();
		
		try
		{
			return acharElemento(n.getEsq(), new Codigo("0" + c), simb);
		}
		catch (Exception erro)
		{
			
		}
		
		try
		{
			return acharElemento(n.getDir(),new Codigo("1" + c), simb);
		}
		catch (Exception erro)
		{
			
		}
		
		throw new Exception("Não achei");
	}
	
	/*public String toString()
	{
		return toString(this.raiz);
	}
	
	protected String toString(No n)
	{
		if (n == null)
			return "";
		
		return toString(n.getEsq()) + "/" + toString(n.getDir());
			
	}*/
}