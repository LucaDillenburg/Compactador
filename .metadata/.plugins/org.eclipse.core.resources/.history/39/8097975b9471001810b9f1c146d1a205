package compactador;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Arrays;

import codigo.*;
import listaDesordenada.*;
import meuRandomAccessFile.MeuRandomAccessFile;
import no.*;

public class Compactador
{
	public class FreqSimb
	{
	   protected int freq;
	   protected int simb;

		public FreqSimb(int f)
	   	{
	      	this(f, -1);
	   	}

	   	public FreqSimb(int f, int s)
	   	{
	    	this.freq = f;
	      	this.simb = s;
	   	}

	   	public int getSimb()
	   	{
	    	return this.simb;
	   	}

	   	public int getFreq()
	   	{
	    	return this.freq;
	   	}
	   	
	   	public String toString()
	   	{
	   		return "Frequencia: " + this.getFreq() + " Simbolo: " + this.getSimb();
	   	}
	}

	public static final String EXTENSAO_MEU_COMPACTADOR = "paodebatata";
	
	protected Codigo[] codigos;
	protected File arq;
	protected int qtdSimb;
	protected int[] vetFreq;

	public Compactador()
	{
		this.resetarInformacoes();
	}

	public void compactar(File arquivo) throws Exception
	{
		if (arquivo == null)
			throw new FileNotFoundException("Arquivo nulo");
		
		this.arq = arquivo;
		this.compactar();
	}
	
	public void compactar(String nomeArquivo) throws Exception
	{
		if(!new File(nomeArquivo).exists())
			throw new FileNotFoundException("Arquivo inexistente!");

		this.arq = new File(nomeArquivo);
		this.compactar();
	}
	
	protected void resetarInformacoes()
	{
		this.codigos = null;
		this.arq = null;
		this.qtdSimb = 0;
		this.vetFreq = null;
	}
	
	protected void compactar() throws Exception
	{
		//1. montar vetor com a frequencia dos bytes usados
		this.montaVetFreq();
		//2. montar vetor de No ordenado a partir do vetor com a frequencia
		// e
		//3. montar uma arvore a partir do vetor de no
		No<FreqSimb> raiz = montarArvore();
		
		//4. colocar novos codigos na arvore
		this.codigos = new Codigo[256];
		for(int i=0; i < this.codigos.length; i++)
			this.codigos[i] = null;
		this.colocarNvsCodigosNaArv(raiz, new Codigo());

		//5. escrever novo arquivo com novo
		this.escreverArqCompactado();
	}
	
	protected void escreverArqCompactado()
	{
		try
		{
			String extensao = this.getFileExtension();
			File novoArquivo = this.criarNovoArquivo(this.getFileDirectory(), EXTENSAO_MEU_COMPACTADOR);
			
			MeuRandomAccessFile escritor = new MeuRandomAccessFile(novoArquivo, "rw");
			MeuRandomAccessFile leitor = new MeuRandomAccessFile(this.arq, "r");
			
			//colocar cabecalho: length extencao, extencao, posLixo, qtd posicoes usadas vetor No,
			 //vetor de No
			escritor.write(extensao.length());
			for (int i = 0; i < extensao.length(); i++)
				escritor.write((int)extensao.charAt(i));
			
			//coloca 0 em qtdLixo e coloca um ponteiro para voltar depois
			 //(pois soh depois de escrever o arquivo inteiro vai saber quantos bits sobraram)
			long posLixo = escritor.getFilePointer();
			escritor.write(0);
			
			//escrever numero de posicoes do vetor
			escritor.writeInt(this.qtdSimb);
			//escrever vetor em si
			for (int i = 0; i < this.vetFreq.length; i++) {
				if (this.vetFreq[i] > 0)
				{
					escritor.write(i);
					escritor.writeInt(this.vetFreq[i]);
				}
			}
			
			//escrever novos codigos do arquivo
			for (int i = 0; i < leitor.length(); i++)
				escritor.escreverCodigo(this.codigos[leitor.read()]);
			
			//preencher lixo
			int qtdLixo = escritor.getQtdLixo();
			escritor.preencherLixo();
			
			//volta no lugar onde ficaria o qtdLixo e escreve
			escritor.seek(posLixo);
			escritor.write(qtdLixo);
			
			escritor.close();
			leitor.close();
		}catch(Exception e)
		{}		
	}
	
	protected File criarNovoArquivo(String diretorio, String extensao)
	{
		//criar o arquivo compactado soh com a extensao
		File arquivo = new File(diretorio + "." + extensao);
		
		int n = 1;
		while (arquivo.exists()) {
			//se jah existe esse arquivo criar outro com " (1)" na frente
			arquivo = new File(diretorio + " (" + n + ")." + extensao);
			n++;
		}

		return arquivo;
	}
	
	protected void colocarNvsCodigosNaArv(No r, Codigo c)
	{
			if(r != null)
			{
				if(((Codigo) r.getInfo()).getQtdBits() != 0)
					this.codigos[((Codigo) r.getInfo()).getByte()] = (Codigo)c.clone();
				else
				{
					c.mais(0);
					this.colocarNvsCodigosNaArv(r.getEsq(), c);
					c.tirarUltimo();
					c.mais(1);
					this.colocarNvsCodigosNaArv(r.getDir(), c);
					c.tirarUltimo();
				}
			}
	}
	
	protected No<FreqSimb> montarArvore()
	{
		//montar vetor de no ordenado
		No<FreqSimb>[] nos = new No[256];
		int qtd = 0;
		
		for(int i=0; i < this.vetFreq.length; i++)
			if(this.vetFreq[i] != 0)
			{
					try
					{
						nos[i] = new No(new FreqSimb(this.vetFreq[i], i));
					} catch (Exception e)
					{
						e.printStackTrace();
					}
					
					qtd++;
					
					//jah vai ordenando o ultimo que acabou de adicionar, 
					//assim nao precisa ordenar tudo depois
					mudarPosNos(nos, qtd);
			}
		
		
		//somar os dois ultimos e ordenando
		for(; qtd>1; qtd--)
		{
			mudarPosNos(nos, qtd);
			int freq = nos[qtd-2].getInfo().getFreq() + nos[qtd-1].getInfo().getFreq();
			
			No<FreqSimb> aux = null;
			try
			{
				aux = new No<FreqSimb>(new FreqSimb(freq));
			}catch (Exception e){e.printStackTrace();}
			
			aux.setEsq(nos[qtd-2]);
			aux.setDir(nos[qtd-1]);
			nos[qtd-2] = aux;
			nos[qtd-1] = null;
		}
		
		//unico no: raiz
		return nos[0];
	}
	
	protected void mudarPosNos(No[] nos, int qtd)
	{
		for(int i=qtd-1; i > 0; i--)
		{
				if(((FreqSimb) nos[i].getInfo()).getFreq() <= ((FreqSimb) nos[i-1].getInfo()).getFreq())
					break;
				else
				{
					No<FreqSimb> aux = nos[i];
					nos[i] = nos[i-1];
					nos[i-1] = aux;
				}
		}
		//"arvs" saira diferente (como passagem por referencia)
	}
	
	protected void montaVetFreq()
	{
		this.vetFreq = new int[256];
		
		try
		{
			MeuRandomAccessFile leitor = new MeuRandomAccessFile(this.arq, "r");
			for(int i = 0; i<leitor.length(); i++)
			{
				this.vetFreq[leitor.read()]++;
				this.qtdSimb++;
			}
		}catch(Exception e)
		{}
	}
	
	private String getFileExtension()
	{
        try
        {
        	String nomeArq = this.arq.getName();
            return nomeArq.substring(nomeArq.lastIndexOf(".")+1);
        } 
        catch (Exception e) 
        {
        	return "";
        }
    }

	protected String getFileDirectory()
	{
		try
		{
			String dir = this.arq.getCanonicalPath();
			return dir.substring(0, dir.lastIndexOf('.'));
		}
		catch (Exception e) {
			return "";
		}
	}
}