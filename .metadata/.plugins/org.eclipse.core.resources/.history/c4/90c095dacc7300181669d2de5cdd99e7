package compactador;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Arrays;

import compactadorArquivo.*;

public class Compactador
{
	public static final String STR_FINAL_ARQ = "-[Compacted]";
	
	//compactar
	public static String compactar(File arquivo) throws Exception
	{
		if (arquivo == null)
			throw new FileNotFoundException("Arquivo nulo");
		
		return Compactador.compactarGeral(arquivo, null);
	}
	
	public static String compactar(String nomeArquivo) throws Exception
	{
		if(!new File(nomeArquivo).exists())
			throw new FileNotFoundException("Arquivo inexistente!");

		return Compactador.compactarGeral(new File(nomeArquivo), null);
	}
	
	public static String compactar(File arquivo, String nvNome) throws Exception
	{
		if (arquivo == null)
			throw new FileNotFoundException("Arquivo nulo");
		
		return Compactador.compactarGeral(arquivo, nvNome);
	}
	
	public static String compactar(String nomeArquivo, String nvNome) throws Exception
	{
		if(!new File(nomeArquivo).exists())
			throw new FileNotFoundException("Arquivo inexistente!");

		return Compactador.compactarGeral(new File(nomeArquivo), nvNome);
	}
	
	protected static String compactarGeral(File arquivo, String nvDiretorio) throws Exception
	{
		if(!arquivo.isDirectory())
		{
			CompactadorArquivo compactadorArq = new CompactadorArquivo();
			return compactadorArq.compactar(arquivo);
		}else
		{
			String diretorio = arquivo.getCanonicalPath() + STR_FINAL_ARQ;
			
			String nomeArq = diretorio;
			int n = 1;
			while (new File(nomeArq).exists()) {
				//se jah existe esse arquivo criar outro com " (1)" na frente
				nomeArq = diretorio + " (" + n + ")";
				n++;
			}
			
			Compactador.compactarAux(arquivo, nomeArq);
			return nomeArq;
		}
	}
	
	protected static void compactarAux(File arquivo, String nomeArq)
	{
		if(!arquivo.isDirectory())
		{
			CompactadorArquivo compactadorArq = new CompactadorArquivo();

			try
			{
				compactadorArq.compactar(arquivo, nomeArq);
			}catch (Exception e) {e.printStackTrace();}
		}else
		{
			for (final File arq : arquivo.listFiles())
			{
				try {
					boolean worked = new File(nomeArq).mkdirs();
					String path = arq.getCanonicalPath();
					int indexUltimoPonto = path.lastIndexOf(".");
					String nomeArquivo;
					if(indexUltimoPonto < 0)
						nomeArquivo = nomeArq + path.substring(path.lastIndexOf("\\"));
					else
						nomeArquivo = nomeArq + path.substring(path.lastIndexOf("\\"), indexUltimoPonto);
					Compactador.compactarAux(arq, nomeArquivo);
				} catch (IOException e) {e.printStackTrace();}
		    }
		}
	}
	
	//descompactar
	public static String descompactar(File arquivo) throws Exception
	{
		if (arquivo == null)
			throw new FileNotFoundException("Arquivo nulo");
		
		return Compactador.descompactarGeral(arquivo, null);
	}
	
	public static String descompactar(String nomeArquivo) throws Exception
	{
		if(!new File(nomeArquivo).exists())
			throw new FileNotFoundException("Arquivo inexistente!");

		return Compactador.descompactarGeral(new File(nomeArquivo), null);
	}
	
	public static String descompactar(File arquivo, String nvNome) throws Exception
	{
		if (arquivo == null)
			throw new FileNotFoundException("Arquivo nulo");
		
		return Compactador.descompactarGeral(arquivo, nvNome);
	}
	
	public static String descompactar(String nomeArquivo, String nvNome) throws Exception
	{
		if(!new File(nomeArquivo).exists())
			throw new FileNotFoundException("Arquivo inexistente!");

		return Compactador.descompactarGeral(new File(nomeArquivo), nvNome);
	}
	
	protected static String descompactarGeral(File arquivo, String nvDiretorio) throws Exception
	{
		if(!arquivo.isDirectory())
		{
			CompactadorArquivo compactadorArq = new CompactadorArquivo();
			return compactadorArq.descompactar(arquivo);
		}else
		{
			String diretorio = arquivo.getCanonicalPath() + STR_FINAL_ARQ;
			
			String nomeArq = diretorio;
			int n = 1;
			while (new File(nomeArq).exists()) {
				//se jah existe esse arquivo criar outro com " (1)" na frente
				nomeArq = diretorio + " (" + n + ")";
				n++;
			}
			
			Compactador.descompactarAux(arquivo, nomeArq);
			return nomeArq;
		}
	}
	
	protected static void descompactarAux(File arquivo, String nomeArq)
	{
		if(!arquivo.isDirectory())
		{
			CompactadorArquivo compactadorArq = new CompactadorArquivo();

			try
			{
				compactadorArq.descompactar(arquivo, nomeArq);
			}catch (Exception e) {e.printStackTrace();}
		}else
		{
			for (final File arq : arquivo.listFiles())
			{
				try {
					boolean worked = new File(nomeArq).mkdirs();
					String path = arq.getCanonicalPath();
					int indexUltimoPonto = path.lastIndexOf(".");
					String nomeArquivo;
					if(indexUltimoPonto < 0)
						nomeArquivo = nomeArq + path.substring(path.lastIndexOf("\\"));
					else
						nomeArquivo = nomeArq + path.substring(path.lastIndexOf("\\"), indexUltimoPonto);
					Compactador.descompactarAux(arq, nomeArquivo);
				} catch (IOException e) {e.printStackTrace();}
		    }
		}
	}
	
}